getInvalidBooks
Реализуйте и экспортируйте по умолчанию функцию, которая принимает на вход список книг, находит среди них невалидные и возвращает их наружу.
Описания формата каждой книги:

name – строка, обязательное
author – строка, обязательное
pagesCount – положительное число, необязательное
link – строка url, необязательное, не может быть пустой строкой; ссылка на книгу в интернете
genre – строка, необязательное; жанр книги. Должен входить в список определенный в файле index.js

function normalize
Реализуйте и экспортируйте по умолчанию функцию normalize() которая принимает на вход список городов и стран, нормализует их имена, сортирует города и группирует их по стране.

class Url
В данном упражнении нам предстоит реализовать класс-обёртку над стандартным классом URL. Наш класс будет предоставлять другие методы и немного расширять возможности стандартного.

Url.js
Реализуйте и экспортируйте по умолчанию класс для работы с HTTP-адресом. Класс должен содержать конструктор и методы:

конструктор — принимает на вход HTTP-адрес в виде строки
getScheme() — возвращает протокол передачи данных (без двоеточия)
getHostName() — возвращает имя хоста
getQueryParams() — возвращает параметры запроса в виде пар ключ-значение объекта
getQueryParam() — получает значение параметра запроса по имени. Если параметр с переданным именем не существует, метод возвращает значение заданное вторым параметром (по умолчанию равно null)
equals(url) — принимает объект класса Url и возвращает результат сравнения с текущим объектом — true или false



class Truncater
Для работы с текстом в вебе бывает полезна функция truncate(), которая обрезает слишком длинный текст и ставит в конце многоточие:

truncate('long text', { length: 3 }); // lon...
solution.js
Реализуйте в классе Truncater конструктор и метод truncate(). Метод принимает текст и следующие опции:

separator - символ, заменяющий обрезанную часть строки
length - максимальная длина исходной строки. Если строка короче, чем эта опция, то возвращается исходная строка.
Конфигурацию по умолчанию можно переопределить через конструктор класса и вторым аргументом метода truncate(). Оба способа можно комбинировать.

Подсказки
Опции по умолчанию заданы, как статическое свойство класса. Обратите на это внимание при объединении исходных опций с пользовательскими.


class PasswordValidator
Валидация - процесс проверки корректности данных. В вебе происходит всегда при отправке форм, например, регистрация на многих сайтах проверяет корректность введённого емейла, его уникальность (что такого пользователя ещё нет).

Каждый тип валидации в таких системах обычно представлен классом-валидатором, который принимает на вход опции и предоставляет интерфейс в виде функции validate(). Эта функция принимает на вход то, что проверяется (валидируется) и возвращает массив или объект с ошибками. Если объект пустой, значит ошибок нет.

Задание:
Реализуйте и экспортируйте по умолчанию класс PasswordValidator, ориентируясь на тесты.

Этот валидатор поддерживает следующие опции:
minLength (по умолчанию 8) - минимальная длина пароля
containNumbers (по умолчанию true) - требование содержать хотя бы одну цифру
Опции передаются одним объектом в конструктор валидатора.



